# Generated by Django 5.1.2 on 2024-10-21 05:49

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('ALWAL', 'Alwal'), ('AMBERPET', 'Amberpet'), ('AMEERPET', 'Ameerpet'), ('ATTAPUR', 'Attapur'), ('BACHUPALLY', 'Bachupally'), ('BANJARA_HILLS', 'Banjara Hills'), ('BEGUMPET', 'Begumpet'), ('CHARMINAR', 'Charminar'), ('DILSUKHNAGAR', 'Dilsukhnagar'), ('ECIL', 'ECIL'), ('GACHIBOWLI', 'Gachibowli'), ('HAFIZ_BABA_NAGAR', 'Hafiz Baba Nagar'), ('HAYATH_NAGAR', 'Hayath Nagar'), ('HIMAYATNAGAR', 'Himayatnagar'), ('JEEDIMETLA', 'Jeedimetla'), ('JNTU', 'JNTU'), ('KARKHANA', 'Karkhana'), ('KOMPALLY', 'Kompally'), ('KONDAPUR', 'Kondapur'), ('KUKATPALLY', 'Kukatpally'), ('LB_NAGAR', 'LB Nagar'), ('MADHAPUR', 'Madhapur'), ('MALAKPET', 'Malakpet'), ('MANIKONDA', 'Manikonda'), ('MASAB_TANK', 'Masab Tank'), ('MEDCHAL_ROAD', 'Medchal Road'), ('MIYAPUR', 'Miyapur'), ('MOKILA', 'Mokila'), ('MOOSAPET', 'Moosapet'), ('NAGOLE', 'Nagole'), ('NARAYANGUDA', 'Narayanguda'), ('NIZAMPET', 'Nizampet'), ('PATANCHERU', 'Patancheru'), ('PEERZADIGUDA', 'Peerzadiguda'), ('Q_CITY', 'Q City'), ('SAINIKPURI', 'Sainikpuri'), ('SANGAREDDY', 'Sangareddy'), ('SAROOR_NAGAR', 'Saroor Nagar'), ('SERILINGAMPALLY', 'Serilingampally'), ('SHAMSHABAD', 'Shamshabad'), ('SIVARAMPALLI', 'Sivarampalli'), ('SURARAM', 'Suraram'), ('TARNAKA', 'Tarnaka'), ('TOLI_CHOWKI', 'Toli Chowki'), ('UPPAL', 'Uppal'), ('VANASTHALIPURAM', 'Vanasthalipuram')], max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('gender', models.CharField(choices=[('MALE', 'M'), ('FEMALE', 'F'), ('OTHER', 'O')], max_length=6)),
                ('role', models.CharField(choices=[('STUDENT', 'Student'), ('EMPLOYEE', 'Employee')], max_length=10)),
                ('groups', models.ManyToManyField(blank=True, related_name='custom_user_groups', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='custom_user_permissions', to='auth.permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_type', models.CharField(choices=[('income', 'Income'), ('expense', 'Expense')], max_length=10)),
                ('remaining_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('total_expenses_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='finanace_backend.user')),
            ],
        ),
        migrations.CreateModel(
            name='Expense',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(choices=[('FOOD', 'Food'), ('ENTERTAINMENT', 'Entertainment'), ('TRAVEL', 'Travel'), ('HEALTH', 'Health'), ('MISCELLANEOUS', 'Miscellaneous'), ('RENT', 'Rent'), ('SAVINGS', 'Savings'), ('SHOPPING', 'Shopping')], max_length=50)),
                ('description', models.TextField(blank=True, null=True)),
                ('expense_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('date', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='finanace_backend.user')),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('salary', models.DecimalField(decimal_places=2, max_digits=10)),
                ('month', models.DateField(auto_now=True)),
                ('location', models.CharField(choices=[('HYDERABAD', 'Hyderabad')], default='HYDERABAD', max_length=150)),
                ('preference', models.CharField(choices=[('HIGH', 'High'), ('MEDIUM', 'Medium'), ('LOW', 'Low')], max_length=6)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='finanace_backend.user')),
            ],
        ),
        migrations.CreateModel(
            name='LocationBasedExpenditure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(choices=[('FOOD', 'Food'), ('ENTERTAINMENT', 'Entertainment'), ('TRAVEL', 'Travel'), ('HEALTH', 'Health'), ('MISCELLANEOUS', 'Miscellaneous'), ('RENT', 'Rent'), ('SAVINGS', 'Savings'), ('SHOPPING', 'Shopping')], max_length=50)),
                ('gender', models.CharField(choices=[('MALE', 'M'), ('FEMALE', 'F'), ('OTHER', 'O')], max_length=6)),
                ('high_percentage', models.FloatField()),
                ('medium_percentage', models.FloatField()),
                ('low_percentage', models.FloatField()),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='finanace_backend.location')),
            ],
            options={
                'constraints': [models.UniqueConstraint(fields=('location', 'category', 'gender'), name='unique_location_category_gender')],
            },
        ),
    ]
